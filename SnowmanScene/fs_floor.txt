#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;

struct Light {
  vec3 position;
  float cutOff;
  vec3 sunlight;
  vec3 direction;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;

struct Material {
  vec3 ambient;
  vec3 diffuse;
};

uniform Material material;

void main() {
  vec3 lightDir = normalize(light.position - aPos);
  float theta = dot(lightDir, normalize(light.direction));
  vec3 norm = normalize(aNormal);
  vec3 texture = vec3(texture(first_texture, aTexCoord));

  // sunlight
  vec3 lightpos1 = normalize(-light.sunlight);
  float diff1 = max(dot(norm, lightpos1), 0.0);
  vec3 sunlight = light.diffuse * diff1 * texture;

  // ambient
  vec3 ambient = light.ambient * texture;

  // diffuse
  vec3 lightPos = normalize(light.position - aPos);
  float diff = max(dot(norm, (lightPos)), 0.0);
  vec3 diffuse = light.diffuse * diff * texture;

  vec3 result = ambient + diffuse + sunlight;

  if(theta > light.cutOff) {
    fragColor = vec4(result, 1.0);
  } else {
    fragColor = vec4(sunlight + (light.ambient * texture), 1.0);
  }
}
