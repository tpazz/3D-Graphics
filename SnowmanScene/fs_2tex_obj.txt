#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  float cutOff;
  vec3 sunlight;
  vec3 direction;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

void main() {
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);
  float theta = dot(lightDir, normalize(light.direction));
  vec3 mixTexture = mix(texture(first_texture, aTexCoord), texture(second_texture, aTexCoord),0.7f).rgb;
  vec3 texture1 = vec3(texture(first_texture, aTexCoord));
  vec3 texture2 = vec3(texture(second_texture, aTexCoord));

  // ambient
  vec3 ambient = light.ambient * mixTexture;

  // diffuse
  float dDiff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * dDiff * texture1;

  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.2), material.shininess);
  vec3 specular = light.specular * spec * texture2;

  // sunlight
  vec3 sunPos = normalize(-light.sunlight);
  float sDiff = max(dot(norm, sunPos), 0.0);
  vec3 sunlight = light.diffuse * sDiff * mixTexture;

  vec3 inSpot = ambient + diffuse + specular + sunlight;
  vec3 outSpot = sunlight + (light.ambient * mixTexture);

  if(theta > light.cutOff) {
    fragColor = vec4(inSpot, 1.0f);
  } else {
    fragColor = vec4(outSpot, 1.0f);
  }
}
